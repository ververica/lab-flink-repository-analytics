/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
    id "com.diffplug.spotless" version "5.8.2" apply false
    id "io.freefair.lombok" version "5.3.0" apply false
}

allprojects {
    group = 'com.ververica.platform'
    version = '2.2-SNAPSHOT'
    description = """Ververica Platform Lab - Flink Repository Analytics"""
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'

    // artifact properties
    archivesBaseName = "${rootProject.name}-${project.name}"

    ext {
        javaVersion = '1.8'
//        flinkGroup = 'com.ververica.flink'
//        flinkVersion = '1.12.2-stream1'
        flinkGroup = 'org.apache.flink'
        flinkVersion = '1.14.0'
        scalaBinaryVersion = '2.12'
        githubApiVersion = '1.128'
        okHttpVersion = '3.13.1'
        mime4jVersion = '0.8.3'
        log4jVersion = '2.12.1'
        junitVersion = '4.12'
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // declare where to find the dependencies of your project
    repositories {
        // for access from China, you may need to uncomment this line
        // maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        maven {
            url "https://repository.apache.org/content/repositories/snapshots/"
            mavenContent {
                snapshotsOnly()
            }
        }
        maven {
            url 'https://maven.ververica.com/artifactory/vvp-flink-release/'
            mavenContent {
                releasesOnly()
            }
        }
    }

    // common set of dependencies
    dependencies {
        shadow "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        shadow "org.apache.logging.log4j:log4j-api:${log4jVersion}"
        shadow "org.apache.logging.log4j:log4j-core:${log4jVersion}"

        shadow "${flinkGroup}:flink-clients_${scalaBinaryVersion}:${flinkVersion}"
        shadow "${flinkGroup}:flink-java:${flinkVersion}"
        shadow "${flinkGroup}:flink-streaming-java_${scalaBinaryVersion}:${flinkVersion}"

        if (project != project(":common")) {
            implementation project(path: ':common')
        }
    }
    
    spotless {
      format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
      }
      java {
        googleJavaFormat('1.7')
        removeUnusedImports()
      }
    }

    jar {
        archiveClassifier.set('original')
        manifest {
            attributes 'Built-By': System.getProperty('user.name'),
                    'Build-Jdk': System.getProperty('java.version')
        }
    }

    shadowJar {
        mergeServiceFiles()
        archiveClassifier.set('')
        dependencies {
            exclude(dependency("${flinkGroup}:force-shading"))
            exclude(dependency('com.google.code.findbugs:jsr305'))
            exclude(dependency('org.slf4j:.*'))
            exclude(dependency('log4j:.*'))
            exclude(dependency('org.apache.logging.log4j:log4j-to-slf4j'))
            // already provided dependencies from serializer frameworks
            exclude(dependency('com.esotericsoftware.kryo:kryo'))
        }
    }

    assemble.dependsOn(shadowJar)

    sourceSets {
        // Add shadow configuration to runtime class path so that the
        // dynamically-generated tasks by IntelliJ are able to run and have
        // all dependencies they need. (Luckily, this does not influence what
        // ends up in the final shadowJar.)
        main.runtimeClasspath += configurations.shadow

        test.compileClasspath += configurations.shadow
        test.runtimeClasspath += configurations.shadow
    }

    // add FLINK_TRAINING_LOCAL to the environment variables if run via gradle
    tasks.matching({ task -> task instanceof JavaExec }).all {
        environment "FLINK_TRAINING_LOCAL", "1"
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/" + (System.getenv("GITHUB_REPOSITORY") ?: "ververica/lab-flink-repository-analytics")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}
