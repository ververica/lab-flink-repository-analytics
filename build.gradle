/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '6.1.0' apply false
    id "com.diffplug.spotless" version "5.8.2" apply false
    id "io.freefair.lombok" version "5.3.0" apply false
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'com.diffplug.spotless'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'maven-publish'
    apply plugin: 'eclipse'

    // artifact properties
    group = 'com.ververica.platform'
    version = '1.0.0'
    description = """Ververica Platform Lab - Flink Repository Analytics"""
    archivesBaseName = "${rootProject.name}-${project.name}"

    ext {
        javaVersion = '1.8'
        flinkVersion = '1.11.2'
        scalaBinaryVersion = '2.12'
        githubApiVersion = '1.109'
        okHttpVersion = '3.13.1'
        mime4jVersion = '0.8.3'
        log4jVersion = '2.13.1'
    }

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    // declare where to find the dependencies of your project
    repositories {
        // for access from China, you may need to uncomment this line
        // maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        mavenCentral()
        maven {
            url "https://repository.apache.org/content/repositories/snapshots/"
            mavenContent {
                snapshotsOnly()
            }
        }
    }

    // NOTE: We cannot use "compileOnly" or "shadow" configurations since then we could not run code
    // in the IDE or with "gradle run". We also cannot exclude transitive dependencies from the
    // shadowJar yet (see https://github.com/johnrengelman/shadow/issues/159).
    // -> Explicitly define the // libraries we want to be included in the "flinkShadowJar" configuration!
    configurations {
        flinkShadowJar // dependencies which go into the shadowJar

        // provided by Flink
        flinkShadowJar.exclude group: 'org.apache.flink', module: 'force-shading'
        flinkShadowJar.exclude group: 'com.google.code.findbugs', module: 'jsr305'
        flinkShadowJar.exclude group: 'org.slf4j'
        flinkShadowJar.exclude group: 'log4j'
        flinkShadowJar.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'

        // already provided dependencies from serializer frameworks
        flinkShadowJar.exclude group: 'com.esotericsoftware.kryo', module: 'kryo'
        flinkShadowJar.exclude group: 'javax.servlet', module: 'servlet-api'
        flinkShadowJar.exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    // common set of dependencies
    dependencies {
        implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
        implementation "org.apache.logging.log4j:log4j-jcl:${log4jVersion}"

        if (project != project(":common")) {
            implementation project(path: ':common')
            // transitive dependencies for flinkShadowJar need to be defined above
            // (the alternative of using configuration: 'shadow' does not work there because that adds a dependency on
            // the jar file, not the sources)
            flinkShadowJar project(path: ':common', transitive: false)
        }
    }
    
    spotless {
      format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'

        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
      }
      java {
        googleJavaFormat('1.7')
        removeUnusedImports()
      }
    }

    // make flinkShadowJar dependencies available:
    sourceSets {
        main.compileClasspath += configurations.flinkShadowJar
        main.runtimeClasspath += configurations.flinkShadowJar

        test.compileClasspath += configurations.flinkShadowJar
        test.runtimeClasspath += configurations.flinkShadowJar

        javadoc.classpath += configurations.flinkShadowJar
    }

    eclipse {
        classpath {
            plusConfigurations += [configurations.flinkShadowJar]
        }
    }

    if (plugins.findPlugin('application')) {
        applicationDefaultJvmArgs = ["-Dlog4j.configuration=log4j.properties"]
        run.classpath = sourceSets.main.runtimeClasspath
    }

    jar {
        archiveClassifier.set('original')
        manifest {
            attributes 'Built-By': System.getProperty('user.name'),
                    'Build-Jdk': System.getProperty('java.version')
        }
    }

    shadowJar {
        configurations = [project.configurations.flinkShadowJar]
        mergeServiceFiles()
        archiveClassifier.set('')
    }

    assemble.dependsOn(shadowJar)

    // add FLINK_TRAINING_LOCAL to the environment variables if run via gradle
    tasks.matching({ task -> task instanceof JavaExec }).all {
        environment "FLINK_TRAINING_LOCAL", "1"
    }

    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/" + (System.getenv("GITHUB_REPOSITORY") ?: "ververica/lab-flink-repository-analytics")
                credentials {
                    username = System.getenv("GITHUB_ACTOR")
                    password = System.getenv("GITHUB_TOKEN")
                }
            }
        }
    }
}
